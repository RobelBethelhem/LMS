<!DOCTYPE html>
<html lang="en">
    <%- include('./partials/head.ejs') %>
    <link rel="stylesheet" href="/search_icon.css"> 
    <style>
.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
  background-color: #fefefe;
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  max-width: 600px; /* Increase the value here, e.g., 600px */
  position: relative;
}

.close {
  color: #aaa;
  position: absolute;
  top: 10px;
  right: 10px;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
}

form {
  display: grid;
  gap: 10px;
}

label {
  font-weight: bold;
}

input,
select,
textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  box-sizing: border-box;
}

button {
  padding: 10px 20px;
  background-color: #4caf50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background-color: #45a049;
}

.error {
  color: red;
  margin-top: 5px;
}

      /* Improved Table Styles */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  font-size: 14px;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
}

th, td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #f0f0f0;
}

thead {
  background-color: #f7f7f7;
}

/* Hover effect for rows */
tbody tr:hover {
  background-color: #f5f5f5;
}

/* Highlighted header for active sorting */
th.active {
  background-color: #e0e0e0;
}

/* Adding zebra striping for better readability */
tbody tr:nth-child(even) {
  background-color: #fafafa;
}

/* Adjustments for better alignment */
.pagination a {
  display: inline-block;
}

/* Your existing styles... */

    
      .search-container {
        margin-bottom: 20px;
      }
    
      .search-container input[type="text"] {
        padding: 6px;
        width: 200px;
      }
    
      .pagination {
        display: flex;
        justify-content: center;
        list-style: none;
        margin-top: 20px;
      }
    
      .pagination li {
        margin: 0 5px;
        cursor: pointer;
      }
    
      .pagination a {
        color: black;
        padding: 8px 16px;
        text-decoration: none;
        border: 1px solid #ddd;
      }
    
      .pagination a.active {
        background-color: #4caf50;
        color: white;
        border: 1px solid #4caf50;
      }
    
      .pagination a:hover:not(.active) {
        background-color: #ddd;
      }
    
      /* Your existing styles... */
    </style>
<body>
  <div class="layer"></div>
<!-- ! Body -->

<div class="page-flex" style="padding-top: 120px; margin-left: 200px; padding-top: 120px; padding-left: 20px;">
  <!-- ! Sidebar -->
  <%- include('./partials/aside.ejs') %>
  <div class="main-wrapper">
    <!-- ! Main nav -->
      <%- include('./partials/nav.ejs') %>
    <!-- ! Main -->
    <main class="main users chart-page" id="skip-target">
      <div class="container">


  <div class="search-container">
    <input type="text" id="searchInput" placeholder="Search...">
  </div>

  <label for="itemsPerPage">Rows Per Page:</label>
  <select id="itemsPerPage" onchange="changeItemsPerPage()">
    <option value="5">5</option>
    <option value="10">10</option>
    <option value="15">15</option>
    <option value="20">20</option>
    <option value="40">40</option>
   
  </select>

        <table id="employeeTable">
          <thead>
            <tr>
              <th>No</th>
              <th hidden>ID</th>
              <th>Course Title</th>
              <th>Course Id</th>
              <th>Position</th>
              <th>Department</th>
              <th hidden>Course Description</th>
              <th hidden>Course Objective</th>
              <th>Course Status</th>
              <th>Certeficate Needed</th>
              <th>Passing Score</th>
              <th>Sensetivity</th> 
              <th>Total Hour </th> 
            </tr>
          </thead>
          <tbody>
            <% 
              let length = courses.length;
              for(let i=0; i<length; i++) {
            %>
              <tr>
              <td><%= i+1 %></td>
              <td hidden><%= courses[i].id %></td>
              <td><%= courses[i].course_title %></td>
              <td><%= courses[i].course_id %></td>
              <td><%= courses[i].position %></td>
              <td><%= courses[i].department %></td>
              <td hidden><%= courses[i].course_description %></td>
              <td hidden><%= courses[i].course_objective %></td>
              <td><%= courses[i].course_status %></td>
              <td><%= courses[i].certeficate_needed %></td>
              <td><%= courses[i].passing_score %></td>
              <td><%= courses[i].sensetivity %></td>
              <td><%= courses[i].total_hour %></td> 
            </tr>
            <% } %>
          </tbody>
        </table>

        <div class="pagination" id="pagination"></div>



        <!-- Modal -->
        <!-- Modal -->
<div id="myModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <form id="modalForm" class="name courseregform">
                <label for="course_title">Course_title:</label>
                <input type="text" id="course_title" name="course_title" required>
                
                <label for="course_id">Course_id:</label>
                <input type="text" id="course_id" name="course_id" required>
    
                

                <label for="position">Position:</label>
               
                <select id="position" name="position" class="custom-select" required multiple size="3">
                    <option value="" disabled selected>Select Position</option>
                    <option value="YGT">YGT</option>
                    <option value="Manager">Manager</option>
                    <option value="Director">Director</option>
                    <option value="all">All</option>
  
                </select>
    
                <label for="department">Department:</label>
                <select id="department" name="department" class="custom-select" required multiple size="3">
                    <option value="" disabled selected>Select Department</option>
                    <option value="Information Technology">Information Technology</option>
                    <option value="Business">Business</option>
                    <option value="all">All</option>
             
                </select>
    
                <label for="course_description">Course Description:</label>
                <textarea id="course_description" name="course_description" rows="8"></textarea>



                <label for="course_objective">Course Objective:</label>
                <textarea id="course_objective" name="course_objective" rows="8"></textarea>

                

                <label for="course_status">Course Status Options:</label>
                <select id="course_status" name="course_status" class="custom-select" required>
                  <option value="" disabled selected>Select Course Status</option>
                    <option value="pc">In Progress/Completed</option>
                    <option value="pp">In Progress/Passed</option>
                    <option value="ppf">In Progress/Passed/Failed</option>
                </select>

                <label for="certeficate_needed">Certeficate Needed:</label>
                <select id="certeficate_needed" name="certeficate_needed" class="custom-select" required>
                  <option value="" disabled selected>Select Certeficate needed</option>
                    <option value="yes">Certeficate Issued when after completion of course </option>
                    <option value="no">Certeficate not Issued when after completion of course</option>
                </select>

                <label for="sensetivity">Material Sensetivity:</label>
                <select id="sensetivity" name="sensetivity" class="custom-select" required>
                  <option value="" disabled selected>Select Sensetivity</option>
                    <option value="yes">High</option>
                    <option value="no">Low</option>
                </select>

                <label for="passing_score" id="passing_score_label" style="display: none;">Passing Score:</label>
                <input type="number" id="passing_score" name="passing_score" style="display: none;">

                <label for="total_hour">Total Hour:</label>
                <input type="number" id="total_hour" name="total_hour" required>

                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required>

                <div class="loginpassword error text-danger" style="color: red;"></div>
    
                <button type="submit">Update</button>
            </form>
  </div>
</div>

















      </div>
    </main>
        
    <!-- ! Footer -->
    <%- include('./partials/foot.ejs') %>
  </div>
</div>
<!-- Chart library -->
<script src="/plugins/chart.min.js"></script>
<!-- Icons library -->
<script src="/plugins/feather.min.js"></script>
<!-- Custom scripts -->
<script src="/js/script.js"></script>
<script>
  // JavaScript for search functionality
  const searchInput = document.getElementById('searchInput');
  const employeeTable = document.getElementById('employeeTable');
  const rows = employeeTable.getElementsByTagName('tr');

  const courseregform = document.querySelector('form.name.courseregform');
const loginpasswordError = document.querySelector('.loginpassword.error');

// Event listener for form submission
courseregform.addEventListener('submit', async (e) => {
  e.preventDefault();
  loginpasswordError.textContent = '';


  try {
    const formData = new FormData(courseregform);


     // Iterate through all select elements
     document.querySelectorAll('select[multiple]').forEach((select) => {
      const selectedOptions = [];
      const options = select.options;
      for (let i = 0; i < options.length; i++) {
        if (options[i].selected) {
          selectedOptions.push(options[i].value);
        }
      }
      // Append the array to the FormData
      formData.append(select.name, JSON.stringify(selectedOptions));
    });

    for (var pair of formData.entries()) {
      console.log(pair[0] + ': ' + pair[1]);
    }
   
    const res = await fetch('/update_course', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json', // Set the content type to JSON
    },
    body: JSON.stringify(Object.fromEntries(formData)), // Convert FormData to a plain object
  });

    const data = await res.json();
    if (res.ok) {
      loginpasswordError.textContent = data.message;
      // You can handle the success response here, such as redirecting the user.
    } else {
      loginpasswordError.textContent = data.message;
    }
  } catch (err) {
    console.log(err);
  }
  closeModal();
});


  searchInput.addEventListener('keyup', function(event) {
    const value = event.target.value.toLowerCase();

    for (let i = 1; i < rows.length; i++) { // Start from index 1 to exclude the header row
      const cells = rows[i].getElementsByTagName('td');
      let shouldDisplay = false;

      for (let j = 0; j < cells.length; j++) {
        const cellValue = cells[j].innerHTML.toLowerCase();

        if (cellValue.includes(value)) {
          shouldDisplay = true;
          break;
        }
      }

      if (shouldDisplay) {
        rows[i].style.display = '';
      } else {
        rows[i].style.display = 'none';
      }
    }
  });


  // New JavaScript for pagination
 const itemsPerPageSelect = document.getElementById('itemsPerPage');
    const paginationContainer = document.getElementById('pagination');
    let currentPage = 1;
    let itemsPerPage = parseInt(itemsPerPageSelect.value);

    // Initialize table and pagination
    updateTable();

    // Event handler for changing items per page
    function changeItemsPerPage() {
      itemsPerPage = parseInt(itemsPerPageSelect.value);
      currentPage = 1; // Reset to the first page when changing items per page
      updateTable();
    }

    // Event handler for next button
    function nextPage() {
      const totalPages = Math.ceil(rows.length / itemsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        updateTable();
      }
    }

    // Event handler for previous button
    function prevPage() {
      if (currentPage > 1) {
        currentPage--;
        updateTable();
      }
    }

    // Update table based on current page and items per page
    function updateTable() {
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = startIndex + itemsPerPage;
      const visibleRows = Array.from(rows).slice(1); // Start from index 1 to exclude the header row

      visibleRows.forEach((row, index) => {
        if (index >= startIndex && index < endIndex) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });

      // Update pagination
      updatePagination();
    }

    // Update pagination based on current page and total pages
    function updatePagination() {
      const totalPages = Math.ceil(rows.length / itemsPerPage);
      paginationContainer.innerHTML = '';

      for (let i = 1; i <= totalPages; i++) {
        const li = document.createElement('li');
        li.innerHTML = `<a href="#" class="${i === currentPage ? 'active' : ''}" onclick="goToPage(${i})">${i}</a>`;
        paginationContainer.appendChild(li);
      }
    }

    // Function to go to a specific page
    function goToPage(page) {
      currentPage = page;
      updateTable();
    }




  // JavaScript for modal functionality
const modal = document.getElementById('myModal');
const modalForm = document.getElementById('modalForm');
const inputs = modalForm.querySelectorAll('input[type="text"], input[type="number"], input[type="email"]');
const textarea = modalForm.querySelectorAll('textarea');
const selectElements = modalForm.querySelectorAll('select');
// const closeBtn = document.getElementsByClassName('close')[0];
const closeBtn = document.querySelector('#myModal .close');

// Function to display modal with row data
function displayModal(row) {
  const course_title = row.cells[2].innerHTML;
  const course_id = row.cells[3].innerHTML;
  const position = row.cells[4].innerHTML;
  const department = row.cells[5].innerHTML;
  const course_description= row.cells[6].innerHTML;
  const course_objective = row.cells[7].innerHTML;
  const course_status= row.cells[8].innerHTML;
  const certeficate_needed = row.cells[9].innerHTML;
  const sensetivity = row.cells[11].innerHTML;
  const id = row.cells[1].innerHTML;
  const total_hour = row.cells[12].innerHTML;

  inputs[0].value = course_title;
  inputs[1].value = course_id;
  inputs[3].value  = total_hour; 

const positionsArray = position.split(';');
for (let i = 0; i < selectElements[0].options.length; i++) {
  const option = selectElements[0].options[i];
  if (positionsArray.includes(option.value)) {
    option.selected = true;
  } else {
    option.selected = false;
  }
}

const departmentsArray = department.split(';');
for (let i = 0; i < selectElements[1].options.length; i++) {
  const option = selectElements[1].options[i];
  if (departmentsArray.includes(option.value)) {
    option.selected = true;
  } else {
    option.selected = false;
  }
}

textarea[0].value = course_description;
textarea[1].value = course_objective;
selectElements[2].value  = course_status; 
  selectElements[3].value = certeficate_needed;
  selectElements[4].value  = sensetivity; 
  

  modal.style.display = 'block';
}
// Function to close the modal
function closeModal() {
  modal.style.display = 'none';
}

// Event listener for close button
closeBtn.addEventListener('click', function() {
  closeModal();
});

// Event listener for row click
for (let i = 1; i < rows.length; i++) {
  rows[i].addEventListener('click', function() {
    displayModal(this);
  });
}

 


</script>
<script>
  $(document).ready(function() {
  $(".clickable-row").click(function() {
    window.location = $(this).data("href");
  });
});

  </script>
</body>

</html>